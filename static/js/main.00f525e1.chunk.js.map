{"version":3,"sources":["components/Cards/index.js","components/Wrapper/index.js","App.js","index.js"],"names":["Cards","props","correct","currentScore","react_default","a","createElement","className","alt","src","url","onClick","correctClick","removeCard","id","restart","incorrectClick","Clicky","state","topScore","answer","images","_this","setState","imagesFilter","filter","image","arr","i","length","j","Math","floor","random","temp","_this2","this","shuffleImages","map","components_Cards","key","Component","App","Wrapper","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.00f525e1.chunk.js","sourcesContent":["//React component for the image cards the user will click on.\r\n\r\nimport React from \"react\";\r\nimport './style.css';\r\n\r\nfunction Cards(props) {\r\n\r\n    //If the image has the correct property = true, set it up with correctClick() and removeCard() methods\r\n    if (props.correct) {\r\n        \r\n        //If we aren't to a point where the user is one point away\r\n        //from winning, then we place a normal clicky card\r\n        if (props.currentScore < 4) {\r\n            return (\r\n\r\n                <img className=\"img-thumbnail image-size\" alt={props.alt} src={props.url} onClick={() => { props.correctClick(); props.removeCard(props.id); }}></img>\r\n\r\n            )\r\n        };\r\n\r\n        //If the user is one point away from winning, the last\r\n        //correct card, when clicked, will reset the images \r\n        //so the user can play again\r\n        return(\r\n            <img className=\"img-thumbnail image-size\" alt={props.alt} src={props.url} onClick={() => { props.correctClick(); props.removeCard(props.id); props.restart(); }}></img>\r\n        )\r\n    };\r\n\r\n    //Otherwise, set the card up with the incorrectClick() and restart() methods\r\n    return (\r\n\r\n        <img className=\"img-thumbnail image-size\" alt={props.alt} src={props.url} onClick={() => { props.incorrectClick(); props.restart() }}></img>\r\n    )\r\n};\r\n\r\n\r\n//Export the component to the Wrapper component\r\nexport default Cards;","//Component to contain all of the content we will be using for this application, including the navbar and image cards.\r\n\r\n//Import React, our Cards component, and the images JSON the cards will be utilizing.\r\nimport React, { Component } from \"react\";\r\nimport Cards from \"../Cards\";\r\nimport images from \"../../images.json\";\r\nimport \"./style.css\";\r\n\r\n\r\nclass Clicky extends Component {\r\n\r\n  //Our states for the app for score tracking, answer status (correct or incorrect) and the images being rendered\r\n  state = {\r\n    currentScore: 0,\r\n    topScore: 0,\r\n    answer: \"Click an image to begin!\",\r\n    images\r\n  };\r\n\r\n  //This method shuffles the images around whether the new page loads or if an image is clicked.\r\n  shuffleImages(arr) {\r\n    let i = arr.length - 1;\r\n    for (; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      const temp = arr[i];\r\n      arr[i] = arr[j];\r\n      arr[j] = temp;\r\n    }\r\n    return arr;\r\n  };\r\n\r\n  //If the correct image is clicked, increase the score by one and let the user know.\r\n  correctClick = () => {\r\n    this.setState({ currentScore: this.state.currentScore + 1 });\r\n    if (this.state.currentScore === 4) {\r\n      this.setState({answer: \"You win! Go again!!\"});\r\n      this.setState({topScore: 5})\r\n      this.setState({currentScore: 0})\r\n    }\r\n    else {\r\n      this.setState({ answer: \"Correct!\" });\r\n    }\r\n  }\r\n\r\n  //When a correct image is clicked, we want to remove it from the page so it's not clicked on again\r\n  removeCard = id => {\r\n\r\n    const imagesFilter = this.state.images.filter(image => image.id !== id);\r\n    this.setState({ images: imagesFilter });\r\n  };\r\n\r\n  //If the \"incorrect\" image is clicked, the current score is reset to 0, the top score is updated (if the current score is higher)\r\n  incorrectClick = () => {\r\n    if (this.state.currentScore > this.state.topScore) {\r\n      this.setState({ topScore: this.state.currentScore });\r\n    }\r\n    this.setState({ answer: \"Incorrect. Try again!\" })\r\n    this.setState({ currentScore: 0 });\r\n  }\r\n\r\n  //When an incorrect image is clicked, reset the images\r\n  restart = () => {\r\n    this.setState({ images })\r\n  }\r\n\r\n  //Show everything on the page, passing in all of the images and the above methods as props for the Card component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar text-white text-center border-bottom border-dark wide-border fixed-top\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row w-100\">\r\n              <div className=\"col-md-3 text-sizing\">Click That Image!!</div>\r\n              <div className=\"col-md-4 text-sizing\">{this.state.answer}</div>\r\n              <div className=\"col-md-5 text-sizing\">Score: {this.state.currentScore} | Top Score: {this.state.topScore}</div>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n\r\n        <div className=\"container spacing\">\r\n          <h1 className=\"display-4 text-center border-bottom border-dark p-3\"><ul>Click on all of the Final Fantasy Characters</ul></h1>\r\n\r\n          <div className=\"d-flex flex-wrap\">\r\n            {this.shuffleImages(this.state.images).map(image =>\r\n              <Cards\r\n                correct={image.correct}\r\n                restart={this.restart}\r\n                removeCard={this.removeCard}\r\n                currentScore = {this.state.currentScore}\r\n                correctClick={this.correctClick}\r\n                incorrectClick={this.incorrectClick}\r\n                id={image.id}\r\n                key={image.id}\r\n                url={image.url}\r\n                alt={image.alt}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\n//Export this component to the App component\r\nexport default Clicky;","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\n\n//Render the entire app\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Wrapper/>        \n      </div>\n    );\n  }\n}\n\n//Export to index.js\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n//Render the page\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}